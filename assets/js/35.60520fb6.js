(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{392:function(e,v,t){"use strict";t.r(v);var a=t(44),r=Object(a.a)({},(function(){var e=this,v=e.$createElement,t=e._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"vue响应式原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue响应式原理"}},[e._v("#")]),e._v(" Vue响应式原理")]),e._v(" "),t("p",[e._v("综述：")]),e._v(" "),t("p",[e._v("1.Vue首先要将数据变为可侦听变化的形式")]),e._v(" "),t("p",[e._v("2.其次再用监听器去监听数据属性的变化")]),e._v(" "),t("h2",{attrs:{id:"definereactive函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#definereactive函数"}},[e._v("#")]),e._v(" defineReactive函数")]),e._v(" "),t("p",[e._v("1.定义一个方法，参数为obj,key,value，其中value可选，默认为target[key]")]),e._v(" "),t("p",[e._v("2.内部使用Object.definePrototype将obj的key属性变为getter与setter形式")]),e._v(" "),t("p",[e._v("3.将value变量作为getter的值返回、并在setter中将新值赋值给value")]),e._v(" "),t("p",[e._v("4.检验target必须为引用类型值且不能为null")]),e._v(" "),t("h2",{attrs:{id:"observer类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#observer类"}},[e._v("#")]),e._v(" Observer类")]),e._v(" "),t("p",[e._v("1.定义Observer类")]),e._v(" "),t("p",[e._v("2.定义静态方法setObserver，参数为obj，此方法将设置obj的不可枚举__ob__属性，值为新创建的Observer实例并返回该实例")]),e._v(" "),t("p",[e._v("3.定义构造函数并接收参数obj，并调用walk方法")]),e._v(" "),t("p",[e._v("4.定义walk方法，对obj自身的每个属性使用defineReactive方法")]),e._v(" "),t("p",[e._v("5.定义Observer的静态方法getObserver，参数为obj，返回obj的__ob__属性值")]),e._v(" "),t("h2",{attrs:{id:"observe方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#observe方法"}},[e._v("#")]),e._v(" observe方法")]),e._v(" "),t("p",[e._v("1.定义observe方法并接收一个obj对象")]),e._v(" "),t("p",[e._v("2.验证obj为引用类型")]),e._v(" "),t("p",[e._v("3.检验obj是否有__ob__属性值，若没有则创建__ob__属性值，最后返回obj的__ob__属性值")]),e._v(" "),t("h2",{attrs:{id:"递归调用侦测对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#递归调用侦测对象"}},[e._v("#")]),e._v(" 递归调用侦测对象")]),e._v(" "),t("p",[e._v("1.在defineReactive函数内对value使用observe方法")]),e._v(" "),t("p",[e._v("2.在defineReactive中的setter中对设置的新值调用observe方法")]),e._v(" "),t("h2",{attrs:{id:"数组七个方法的响应式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组七个方法的响应式"}},[e._v("#")]),e._v(" 数组七个方法的响应式")]),e._v(" "),t("p",[e._v("1.使用Object.create方法并传入Array.prototype创建arrayMethods对象")]),e._v(" "),t("p",[e._v("2.定义一个数组，存放数组上修改数组内容的七个方法的名称（push pop shift unshift splice sort reverse）")]),e._v(" "),t("p",[e._v("3.修改arrayMethods上的这七个方法，方法内调用数组原方法并返回结果")]),e._v(" "),t("p",[e._v("4.对于push、unshift与splice方法新加入的值使用observer方法")]),e._v(" "),t("p",[e._v("5.在Observer类的构造函数内，若obj为数组，则用Object.setPrototype方法将其原型设置为arrayMethods")]),e._v(" "),t("h2",{attrs:{id:"dep类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dep类"}},[e._v("#")]),e._v(" Dep类")]),e._v(" "),t("p",[e._v("1.定义Dep和Watch类")]),e._v(" "),t("p",[e._v("2.在Observer构造函数内定义属性dep，值为Dep实例")]),e._v(" "),t("p",[e._v("3.在defineReactive方法内创建实例dep并在setter中调用notify方法，setter中的notify方法要在对value赋值后调用")]),e._v(" "),t("p",[e._v("4.定义Dep实例的notify方法")]),e._v(" "),t("p",[e._v("5.数组定义的七个方法内调用ob.dep.notify()")]),e._v(" "),t("p",[e._v("6.定义属性subs用于存放Watch实例")]),e._v(" "),t("p",[e._v("7.定义方法depend用于在依赖收集阶段收集Watch实例")]),e._v(" "),t("p",[e._v("8.在defineReactive内的getter中调用depend方法")]),e._v(" "),t("p",[e._v("9.在defineReactive内有两个dep要处理，一个是与属性绑定的dep，另一个是与对象绑定的dep？")]),e._v(" "),t("h2",{attrs:{id:"watch类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#watch类"}},[e._v("#")]),e._v(" Watch类")]),e._v(" "),t("p",[e._v("1.定义update方法并在Dep类的notify方法中使用收集的watch的update方法")]),e._v(" "),t("p",[e._v("2.定义构造函数，并设定参数target、expression和callback")]),e._v(" "),t("p",[e._v("3.构造函数内，定义属性target值为参数target")]),e._v(" "),t("p",[e._v("4.构造函数内，定义属性getter值为解析expression后用于获取值的方法")]),e._v(" "),t("p",[e._v("5.构造函数内，定义属性callback值为callback参数")]),e._v(" "),t("p",[e._v("6.构造函数内，定义属性value值为调用实例方法get的返回值")]),e._v(" "),t("p",[e._v("7.定义get函数，在内部设置Dep.target为this，并且用getter+target获取value，最后将Dep.target设置为null并返回value")]),e._v(" "),t("p",[e._v("8.定义update方法，内部调用run方法")]),e._v(" "),t("p",[e._v("9.定义run方法，并在内部调用getAndInvoke方法，并传入callback属性值")]),e._v(" "),t("p",[e._v("10.定义getAndInvoke方法以及参数callback，内部使用get方法获取新值，若新值与已有的value属性值不相等或新值为一个数组，用变量缓存this.value作为旧值并将this.value设置为新值，\n然后调用callback函数的call方法，并以此传入this.target以及新值和旧值")]),e._v(" "),t("h2",{attrs:{id:"parsepath方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parsepath方法"}},[e._v("#")]),e._v(" parsePath方法")]),e._v(" "),t("h2",{attrs:{id:"讲解响应式的步骤"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#讲解响应式的步骤"}},[e._v("#")]),e._v(" 讲解响应式的步骤")]),e._v(" "),t("h3",{attrs:{id:"第一步-定义definereactive方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第一步-定义definereactive方法"}},[e._v("#")]),e._v(" 第一步：定义defineReactive方法")]),e._v(" "),t("p",[e._v("1.提出defineReactive方法与三个参数obj key value")]),e._v(" "),t("p",[e._v("2.随后定义isReference函数用于判断值是否为引用类型")]),e._v(" "),t("p",[e._v("3.判断defineReactive的参数obj是否为引用类型，不是则不继续处理")]),e._v(" "),t("p",[e._v("4.判断defineReactive的参数个数，为2个则将value赋值为obj[key]")]),e._v(" "),t("p",[e._v("5.使用Object.defineProperty方法并写enumerable, configurable, get, set")]),e._v(" "),t("p",[e._v("6.验证：定义有一个属性的对象，并验证defineReactive方法")]),e._v(" "),t("h3",{attrs:{id:"第二步-定义observer类与observe方法-并调用observe方法去监听obj上的所有属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第二步-定义observer类与observe方法-并调用observe方法去监听obj上的所有属性"}},[e._v("#")]),e._v(" 第二步：定义Observer类与observe方法，并调用observe方法去监听obj上的所有属性")]),e._v(" "),t("p",[e._v("1.提出Observer类与observe方法")]),e._v(" "),t("p",[e._v("2.在Observer的构造函数内将this赋值为obj的__obj__属性，并对obj调用walk方法")]),e._v(" "),t("p",[e._v("3.定义walk方法，并对obj的所有属性调用defineReactive方法")]),e._v(" "),t("p",[e._v("4.定义observe方法，参数obj不为引用类型时不处理，获取__ob__属性值，未获取到，则调用new Observer(ojb)并返回observer实例")]),e._v(" "),t("p",[e._v("5.验证：定义有两个属性的对象，并使用observe方法监听这个对象")]),e._v(" "),t("h3",{attrs:{id:"第三步-递归监听obj上属性值的属性等、对设置的新属性值进行监听"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第三步-递归监听obj上属性值的属性等、对设置的新属性值进行监听"}},[e._v("#")]),e._v(" 第三步：递归监听obj上属性值的属性等、对设置的新属性值进行监听")]),e._v(" "),t("p",[e._v("1.在defineReactive内在defineProperty之前对value调用observe方法")]),e._v(" "),t("p",[e._v("2.在defineReactive内的setter中对新设置的值进行监听")]),e._v(" "),t("h3",{attrs:{id:"第四步-对数组的七个方法进行监听"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第四步-对数组的七个方法进行监听"}},[e._v("#")]),e._v(" 第四步：对数组的七个方法进行监听")]),e._v(" "),t("p",[e._v("1.以数组原型为参数调用Object.create方法来创建arrayMethods对象")]),e._v(" "),t("p",[e._v("2.定义数组七个方法名组成的字符串数组")]),e._v(" "),t("p",[e._v("3.遍历七个方法名，使用defineProperty重定义arrayMethods上的这七个方法")]),e._v(" "),t("p",[e._v("4.在重定义的方法内使用原方法并传入this与参数，最后返回原方法放回值")]),e._v(" "),t("p",[e._v("5.在Observer构造函数内，判断obj是否为数组，若为数组则将其原型链改为arrayMethods")]),e._v(" "),t("p",[e._v("5.验证：定义有数组属性的对象，并调用这七个方法，验证返回值与监听效果")]),e._v(" "),t("h3",{attrs:{id:"第五步-对数组方法中新插入的项进行监听"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第五步-对数组方法中新插入的项进行监听"}},[e._v("#")]),e._v(" 第五步：对数组方法中新插入的项进行监听")]),e._v(" "),t("p",[e._v("1.对数组内的每一项进行监听")]),e._v(" "),t("p",[e._v("2.在重定义的方法内获取插入的项，并对它们依次使用observe方法")]),e._v(" "),t("p",[e._v("3.插入项的方法有push unshift splice")]),e._v(" "),t("h3",{attrs:{id:"第六步-建立依赖收集与监听"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第六步-建立依赖收集与监听"}},[e._v("#")]),e._v(" 第六步：建立依赖收集与监听")]),e._v(" "),t("p",[e._v("1.提出Dep与Watch类")]),e._v(" "),t("p",[e._v("2.定义Dep类，定义属性subs，静态属性target，方法depend、notify")]),e._v(" "),t("p",[e._v("3.定义Watch类，定义构造函数，参数为vm,expression,cb，定义属性vm,cb,getter,value，定义方法get与update")]),e._v(" "),t("p",[e._v("4.在Observer构造函数内，设置属性dep为Dep类实例")]),e._v(" "),t("p",[e._v("5.在defineReactive方法内，创建与属性绑定的Dep实例，并将监听value的返回值赋值给childOb变量，在getter中对这两个dep调用依赖收集")]),e._v(" "),t("p",[e._v("6.在defineReactive方法的setter内，将observe新值的返回值赋值给childOb变量，调用属性绑定的Dep实例的notify方法")]),e._v(" "),t("p",[e._v("7.在数组重写的原型方法内，调用this上的observer的dep的notify方法")])])}),[],!1,null,null,null);v.default=r.exports}}]);